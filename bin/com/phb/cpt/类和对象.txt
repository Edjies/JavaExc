1.  类和对象的区别?
类是构造对象的模板或蓝图。我们可以将类想象为制作小甜饼的切割机，将对象想象为小甜饼。
由类构造对象的过程称为创建类的实例。
类就是一类事物，而对象就是一个事物，一类事物中包含若干的事物（而这其中的具体的事物就是对象）

### 初始化 和构造函数
	构造函数的定义和作用?
构造函数名和类名相同，没有返回类型；
构造函数的作用是实例化一个对象。

	构造方法的重载? (4.6.1)
同一个构造方法，名字相同，传参不同，就是重载。
	
	对象初始化的三种方式:
		1. 在类定义的时候初始化(4.6.4)
		2. 在构造函数中初始化
		3. 在初始化块中初始化(4.6.7)   
	对象属性的默认初始化(4.6.2) //所有数据域被初始化为默认值（0，false或null）
	
	通过this调用另外一个构造函数? (4.6.6)
	
### 修饰符 
可见性修饰符 (public, protected, private) ?
final修饰符 (4.3.9)?
可以将实例域定义为final，构建对象时必须初始化这样的域。
也就是说，必须确保在每个个构造器执行之后，这个域的值被设置，并且在后面的操作中，不能够再对他进行修改。
例如，可以将Employee类中的name域声明为final，因为在对象构建之后，这个值不会再被修改，即没有setName方法。
class Employee
{
    private final String name;
...
}

	
	
### 静态属性和静态方法
1. 静态方法和静态属性 如何定义?  如何访问?  和普通属性 普通方法的区别? (4.4.1 4.4.3)
静态方法是一种不能向对象实现操作的方法。例如，Math类的pow方法就是一个静态方法。表达式Math.pow(x,a);
在使用时，不使用任何Math对象。换句话说，没有隐式的参数。
可以认为静态方法是没有this参数的方法。
Employee类的静态方法不能访问id实例域，因为他不能操作对象，但是，静态方法可以访问自身类中的静态域。
public static int getNextId（）
{
    return nextId;
}
可以通过类名调用这个方法：
int n=Employee.getNextId（）；

2. 如何定义一个静态常量?  和静态属性的区别?   (4.4.2) 
静态常量和静态属性的区别是一个有final，一个没有.
例如在Math类中定义了一个静态常量:
public class Math
{
    public static final double PI=3.1415926;
...
}


### 方法参数(按值传递)
理解方法参数的中按值传递? (4.5)
java程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给他的任何参数变量的内容。
一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。